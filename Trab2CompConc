#include <stdio.h>
#include <stdlib.h>

#include <pthread.h>
#include <semaphore.h>



/*
 * Variaveis Globais
 */
int		intCompartilhado,		//espaço de leitura e escrita compartilhado
		contadorLeitores,		//contador de leitores lendo o espaço compartilhado
		numLeitores,
		numEscritores,
		numLeituras,			//numero de leituras dado na entrada do programa
		numEscritas;			//numero de escritas dado na entrada do programa
	
sem_t	semFila,				//quanto uma thread pede para ler ou escrever, ela entra na fila desse semaforo
		semEscritor,			//quanto uma thread escritora eh liberada do semFila, ela eh barrada por esse semaforo
		semContador;			//semaforo usado para acessar a variavel global "contadorLeitores"



pthread_mutex_t	mutexBarreira;	//mutex da barreira inicial
pthread_cond_t	condBarreira;	//variavel de condicao da barreira inicial

int	leitoresBarreira,			//quantos leitores estão barrados
	escritoresBarreira;			//quantos escritores estão barrados

FILE * fileLog;



//Funcao que retorna quantos chars sao nescessarios para representar o numero da entrada
int contaChar(int num) {
	if(num == 0) { return 1; }	//retorna 1 char para representar na string
	int numTemp, contLog;
	
	numTemp = num;
	contLog = 0;
	
	while(numTemp) {
		numTemp /= 10;
		contLog ++;
	}
	
	return contLog;
}



/*
 * Funcoes Iniciais das Threads
 */
//Funcao de leitura
void * leitorMain(void * arg) {
	//fprintf(fileLog, "leitor %d: inicio\n", id, i);
	int	id;	//id da thread
	FILE * fileLeitor; //arquivo da thread
	
	id = *(int*)(arg);
	free(arg);
	
	char fileName[8 + contaChar(id)];
	
	sprintf(fileName, "Leitor_%d", id);
	fileLeitor = fopen(fileName, "w");
	
	
	
	//Simulando a barreira inicial
	pthread_mutex_lock(&mutexBarreira);
	fprintf(fileLog, "leitor %d barrado\n", id);
	
	//Quebrando a barreira para simular o problema Leitores/Escritores com todas as threads executando ao mesmo tempo
	if(leitoresBarreira == numLeitores - 1 && escritoresBarreira == numEscritores) {
		intCompartilhado = -1;
		fprintf(fileLog, "leitor %d broadcast\n", id);
		pthread_mutex_unlock(&mutexBarreira);
		pthread_cond_broadcast(&condBarreira);
	} else {
		leitoresBarreira ++;
		pthread_cond_wait(&condBarreira, &mutexBarreira);
		fprintf(fileLog, "leitor %d broadcast\n", id);
		pthread_mutex_unlock(&mutexBarreira);
	}
	
	
	
	//Funcao se repetira de acordo com o numero de leituras
	int i, numero;
	for(i = 0; i < numLeituras; i++) {
		fprintf(fileLog, "leitor %d deu wait\n", id);
		sem_wait(&semFila);
		fprintf(fileLog, "leitor %d entrou\n", id);
		sem_wait(&semContador);
		if(contadorLeitores == 0) {
			fprintf(fileLog, "leitor %d bloqueia escritor\n", id);
			sem_wait(&semEscritor);
		}
		contadorLeitores++;
		sem_post(&semFila);
		sem_post(&semContador);
		
		
		
		numero = intCompartilhado;
		fprintf(fileLeitor, "%d\n", numero);
		fprintf(fileLog, "leitor %d leu %d\n", id, numero);
		
		
		
		sem_wait(&semContador);
		contadorLeitores--;
		if(contadorLeitores == 0) {
			fprintf(fileLog, "leitor %d libera escritor\n", id);
			sem_post(&semEscritor);
		}
		sem_post(&semContador);
		
		fprintf(fileLog, "leitor %d saiu\n", id);
	}
	
	fclose(fileLeitor);
	pthread_exit(NULL);
}



//Funcao de escrita
void * escritorMain(void * arg) {
	int	id;
	
	id = *(int*)(arg);
	free(arg);
	
	
	
	//Simulando a barreira inicial
	pthread_mutex_lock(&mutexBarreira);
	fprintf(fileLog, "escritor %d barrado\n", id);
	
	//Quebrando a barreira para simular o problema Leitores/Escritores com todas as threads executando ao mesmo tempo
	if(leitoresBarreira == numLeitores && escritoresBarreira == numEscritores - 1) {
		intCompartilhado = -1;
		fprintf(fileLog, "escritor %d broadcast\n", id);
		pthread_mutex_unlock(&mutexBarreira);
		pthread_cond_broadcast(&condBarreira);
	} else {
		escritoresBarreira ++;
		pthread_cond_wait(&condBarreira, &mutexBarreira);
		fprintf(fileLog, "escritor %d broadcast\n", id);
		pthread_mutex_unlock(&mutexBarreira);
	}
	
	
	
	int i;
	for(i = 0; i < numEscritas; i++) {
		fprintf(fileLog, "escritor %d deu wait\n", id);
		sem_wait(&semFila);
		fprintf(fileLog, "escritor %d espera leitores\n", id);
		sem_wait(&semEscritor);
		fprintf(fileLog, "escritor %d entrou\n", id);
		
		
		
		intCompartilhado = id;
		fprintf(fileLog, "escritor %d escreve seu id\n", id);
		
		
		
		fprintf(fileLog, "escritor %d saiu\n", id);
		sem_post(&semFila);
		sem_post(&semEscritor);
	}
	
	pthread_exit(NULL);
}




// blauzudo.c [leitores] [escritores]
int main(int argc, char * argv[]) {
    if(argc < 6) { fprintf(stderr, "entrada inválida!"); }
    
	
	
	leitoresBarreira = 0;
	escritoresBarreira = 0;
	
	numLeitores = atoi(argv[1]);
	numEscritores = atoi(argv[2]);
	
	numLeituras = atoi(argv[3]);
	numEscritas = atoi(argv[4]);
	
	fileLog = fopen(argv[5], "w");
	
	
	
	sem_init(&semFila, 0, 1);
	sem_init(&semEscritor, 0, 1);
	sem_init(&semContador, 0, 1);
	
	pthread_mutex_init(&mutexBarreira, NULL);
	pthread_cond_init (&condBarreira, NULL);
	
	
	
	pthread_t	leitores[numLeitores],
				escritores[numEscritores];
	
	
	
	int l;
	for(l = 0; l < numLeitores; l++) {
		int * id;
		id = (int*)(malloc(sizeof(int)));
		*id = l;
		pthread_create(&leitores[l], NULL, leitorMain, (void*)(id));
	}
	
	int e;
	for(e = 0; e < numEscritores; e++) {
		int * id;
		id = (int*)(malloc(sizeof(int)));
		*id = e;
		pthread_create(&escritores[e], NULL, escritorMain, (void*)(id));
	}
	
	
	
	//Esperando as threads terminarem para liberar memória alocada
	for(l = 0; l < numLeitores; l++) { pthread_join(leitores[l], NULL); }
	for(e = 0; e < numEscritores; e++) { pthread_join(escritores[e], NULL); }
	
	
	
	fclose(fileLog);
	
	sem_destroy(&semFila);
	sem_destroy(&semEscritor);
	sem_destroy(&semContador);
	
	pthread_mutex_destroy(&mutexBarreira);
	pthread_cond_destroy(&condBarreira);
	
	
    
    return 0;
}
